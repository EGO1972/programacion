#include <stdio.h>
#define N 100

void RellenarCreciente(int *v1, int dim);
int Eliminar (int v[], int codigo, int *dim);
int Insertar (int v[], int codigo, int *dim);
void Mostrar (int *v, int  n);

int main(int argc, char **argv) {

    //declaracion de variables
    int n;
    int opcion;
    int eliminar;
    int insertar;
    int codigo;
    int comp;
    int *v;
    comp = 100;

    
printf("introduce el numero de elementos que desea que tenga el vector: ");
scanf("%d", &n);
RellenarCreciente( v, n );
    while(comp !=3){
     printf("1.\t eliminar \n");   
     printf("2.\t insertar \n");
     printf("3. \t Salir");
     
     switch(opcion){
         
    case 1:
        printf("dame el numero que deseas eliminar: ");
        scanf("%d", &codigo);
        eliminar = Eliminar(v, codigo, &n);
            
            if(eliminar != 1){
                printf("no se ha podido eliminar el codigo\n ");
                }
            Mostrar(v, n);
            break;
    case 2: 
        printf("introduce el termino que deseas insertar: ");
        scanf("%d", &codigo);
    
        insertar = Insertar (v, codigo, &n);
    
        if(insertar !=1 ){
            printf("no se ha podido anadir el codigo");
            }
        Mostrar(v, n);
        break;
        
    default:
        comp=3;
     }
    }
    return 0;
}
void RellenarCreciente(int *v1, int dim){
    int i;
    i=0;
    do{
    
        printf("introduce el termino %d ", i);
        scanf("%d",(v1+i));
        if((i !=0) && (v1[i]<v1[i-1])){
            do{
                printf("el termino tiene que ser mayor al anterior");
                printf("introduce el termino %d ", i);
                scanf("%d",(v1+i));
            }while(v1[i]<v1[i-1]);
        }
        i++;
    }while(i<dim);
}

int Eliminar (int v[], int codigo, int *dim){
    int i;
    int pos;
    pos=*dim;
    for(i=0; i< *dim; i++){
        if(codigo==v[i]){
            pos=i;
        }
    }
    if(pos<(*dim-1)){
        for(i=pos+1; i< *dim; i++){
            v[i-1]=v[i];
        }
        (*dim)--;
        return(1);
    } else{
        return 0;
    }
}

void Mostrar(int *codigos, int n){
    int i;
    
    for(i = 0; i < n; i++){
        printf("%d\n", *(codigos + i));
    }
}

int Insertar (int *v, int codigo, int *dim){
    int i, pos, duplicate;
    
    duplicate = 0;
   
    for(i = 0; i < *dim; i++){
        if(codigo == *(v + i)){
            duplicate = 1;
        }
    }
                    
    if(duplicate == 0 && (*dim) + 1 <= N){
        if(codigo < *v){
            for(i = *(dim); i > 0; i--){
                *(v + i) = *(v + i - 1);
            }
            *v = codigo;
            
        } else if (codigo > *(v + *(dim) - 1)){
            *(v+*(dim)) = codigo;
            
        } else {
            //find pos
            for(i = 0; i < (*dim) - 1; i++){
                if(codigo > *(v + i) && codigo < *(v + i + 1)){
                    pos = i + 1;
                }
            }
            
            //shift rest
            for(i = *(dim); i > pos; i--){
                *(v + i) = *(v + i - 1);
            }
            //apend codigo
            *(v+pos) = codigo; 

        }
        (*dim)++;
        return(1);
    } else {
        return(0);
    }
}
